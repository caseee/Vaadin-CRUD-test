/**
 * Movimentations.java
 */
package vaadinapp.view;

import java.io.Serializable;
import java.sql.SQLException;

import vaadinapp.Controller;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.data.util.sqlcontainer.SQLContainer;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

/**
 * @author Marco Casella
 *
 */
public class MovimentationsView extends CustomComponent implements Serializable, View, ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private Table movLinesTable;

	@AutoGenerated
	private GridLayout gridLayout_2;

	@AutoGenerated
	private ComboBox fieldTYPE;

	@AutoGenerated
	private ComboBox fieldSITE;

	@AutoGenerated
	private PopupDateField fieldOPDATE;

	@AutoGenerated
	private TextField fieldID;

	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;

	@AutoGenerated
	private Button saveButton;

	@AutoGenerated
	private Button button_2;

	@AutoGenerated
	private Button button_1;

	private static final long serialVersionUID = -1062391299907169028L;
	public static final String NAME = "Movimentations";
	private Controller controller = VaadinSession.getCurrent().getAttribute(Controller.class);
	private SQLContainer head = controller.getMovimentationsContainer();
	private SQLContainer row = controller.getMovimentation_SpecsContainer();
	private SQLContainer type = controller.getMovimentation_TypesContainer();
	private SQLContainer art = controller.getArticlesContainer();
	private SQLContainer dest = controller.getRegistryContainer();
	private SQLContainer site = controller.getSitesContainer();
	private TextField hiddenTypeField = new TextField();
	private TextField hiddenSiteField = new TextField();
			
	private Integer headID = null;
	private final FieldGroup editorFields = new FieldGroup();
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public MovimentationsView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		movLinesTable.setContainerDataSource(row);
		editorFields.setBuffered(true);
		fieldID.setReadOnly(true);
		editorFields.bind(fieldID, "ID");
		fieldOPDATE.setImmediate(true);
		editorFields.bind(fieldOPDATE, "OPDATE");
		fieldSITE.addValueChangeListener(new ComboboxChangeListener(hiddenSiteField));
		fieldSITE.setImmediate(true);
		fieldSITE.setNullSelectionAllowed(false);
		fieldSITE.setNewItemsAllowed(false);
		fieldSITE.setContainerDataSource(site);
		fieldSITE.setItemCaptionPropertyId("NAME");
		editorFields.bind(hiddenSiteField, "SITE");
		fieldTYPE.addValueChangeListener(new ComboboxChangeListener(hiddenTypeField));
		fieldTYPE.setImmediate(true);
		fieldTYPE.setNullSelectionAllowed(false);
		fieldTYPE.setNewItemsAllowed(false);
		fieldTYPE.setContainerDataSource(type);
		fieldTYPE.setItemCaptionPropertyId("DESCRIPTION");
		editorFields.bind(hiddenTypeField, "MOVIMENTATION_TYPE");
		saveButton.addClickListener(this);
		if (headID==null)
			newMov();
		
	}

	/* (non-Javadoc)
	 * @see com.vaadin.navigator.View#enter(com.vaadin.navigator.ViewChangeListener.ViewChangeEvent)
	 */
	@Override
	public void enter(ViewChangeEvent event) {
		// TODO Auto-generated method stub
		
	}

	/* (non-Javadoc)
	 * @see com.vaadin.ui.Button.ClickListener#buttonClick(com.vaadin.ui.Button.ClickEvent)
	 */
	@Override
	public void buttonClick(ClickEvent event) {
		Button source = event.getButton();

		if (source==saveButton) 
			commit();
		
	}

	/**
	 * 
	 */
	private void commit() {
		
		try {
			editorFields.commit();
			head.commit();
		} catch (CommitException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsupportedOperationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

	private void newMov() {

		Object tempItemId = head.addItem();
		editorFields.setItemDataSource(head.getItem(tempItemId));
				
		hiddenTypeField.setValue("0");
		fieldTYPE.select(hiddenTypeField.getValue());
		
		hiddenSiteField.setValue(new Integer(controller.getLoggedUser().getSite()).toString());
		fieldSITE.select(hiddenSiteField.getValue());
		
		
//		try {
//			editorFields.commit();
//			head.commit();
//		} catch (UnsupportedOperationException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		} catch (SQLException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		} catch (CommitException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
		
		
	}

	/**
	 * Class implementing the ValueChangeListener used to change the textfield value with the key
	 * of the selected external row in the combobox
	 */
	private class ComboboxChangeListener implements ValueChangeListener {

		private TextField field;
		private static final long serialVersionUID = 90074393261185094L;

		/**
		 * @param hiddend field binded to the actual data
		 */
		ComboboxChangeListener(TextField field) {
			this.field = field;
		}
		
		/* (non-Javadoc)
		 * @see com.vaadin.data.Property.ValueChangeListener#valueChange(com.vaadin.data.Property.ValueChangeEvent)
		 */
		@Override
		public void valueChange(ValueChangeEvent event) {
			field.setValue(event.getProperty().getValue().toString());
			
		}

		
	}


	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		mainLayout.addComponent(horizontalLayout_1);
		
		// gridLayout_2
		gridLayout_2 = buildGridLayout_2();
		mainLayout.addComponent(gridLayout_2);
		
		// movLinesTable
		movLinesTable = new Table();
		movLinesTable.setImmediate(false);
		movLinesTable.setWidth("100.0%");
		movLinesTable.setHeight("-1px");
		mainLayout.addComponent(movLinesTable);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("-1px");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(false);
		
		// button_1
		button_1 = new Button();
		button_1.setCaption("Button");
		button_1.setImmediate(true);
		button_1.setWidth("-1px");
		button_1.setHeight("-1px");
		horizontalLayout_1.addComponent(button_1);
		
		// button_2
		button_2 = new Button();
		button_2.setCaption("Button");
		button_2.setImmediate(true);
		button_2.setWidth("-1px");
		button_2.setHeight("-1px");
		horizontalLayout_1.addComponent(button_2);
		
		// saveButton
		saveButton = new Button();
		saveButton.setCaption("SAVE");
		saveButton.setImmediate(true);
		saveButton.setWidth("-1px");
		saveButton.setHeight("-1px");
		horizontalLayout_1.addComponent(saveButton);
		
		return horizontalLayout_1;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_2() {
		// common part: create layout
		gridLayout_2 = new GridLayout();
		gridLayout_2.setImmediate(false);
		gridLayout_2.setWidth("100.0%");
		gridLayout_2.setHeight("100px");
		gridLayout_2.setMargin(false);
		gridLayout_2.setColumns(4);
		gridLayout_2.setRows(4);
		
		// fieldID
		fieldID = new TextField();
		fieldID.setImmediate(false);
		fieldID.setWidth("-1px");
		fieldID.setHeight("-1px");
		gridLayout_2.addComponent(fieldID, 0, 0);
		
		// fieldOPDATE
		fieldOPDATE = new PopupDateField();
		fieldOPDATE.setImmediate(false);
		fieldOPDATE.setWidth("-1px");
		fieldOPDATE.setHeight("23px");
		gridLayout_2.addComponent(fieldOPDATE, 1, 0);
		
		// fieldSITE
		fieldSITE = new ComboBox();
		fieldSITE.setImmediate(false);
		fieldSITE.setWidth("-1px");
		fieldSITE.setHeight("-1px");
		gridLayout_2.addComponent(fieldSITE, 2, 0);
		
		// fieldTYPE
		fieldTYPE = new ComboBox();
		fieldTYPE.setImmediate(false);
		fieldTYPE.setWidth("-1px");
		fieldTYPE.setHeight("-1px");
		gridLayout_2.addComponent(fieldTYPE, 3, 0);
		
		return gridLayout_2;
	}
	
		
}
