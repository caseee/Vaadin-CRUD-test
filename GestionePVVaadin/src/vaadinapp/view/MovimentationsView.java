/**
 * Movimentations.java
 */
package vaadinapp.view;

import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.Date;
import java.util.Iterator;

import vaadinapp.Controller;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.data.util.filter.Compare;
import com.vaadin.data.util.sqlcontainer.RowId;
import com.vaadin.data.util.sqlcontainer.SQLContainer;
import com.vaadin.data.util.sqlcontainer.query.QueryDelegate.RowIdChangeEvent;
import com.vaadin.data.util.sqlcontainer.query.QueryDelegate.RowIdChangeListener;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

/**
 * @author Marco Casella
 *
 */
public class MovimentationsView extends CustomComponent implements Serializable, View, ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private Table table;

	@AutoGenerated
	private GridLayout gridLayout_2;

	@AutoGenerated
	private Button addArticleBTN;

	@AutoGenerated
	private ComboBox destinationCB;

	@AutoGenerated
	private ComboBox fieldTYPE;

	@AutoGenerated
	private ComboBox fieldSITE;

	@AutoGenerated
	private PopupDateField fieldOPDATE;

	@AutoGenerated
	private TextField fieldID;

	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;

	@AutoGenerated
	private Button saveButton;

	@AutoGenerated
	private Button backBTN;

	private static final long serialVersionUID = -1062391299907169028L;
	public static final String NAME = "Movimentations";
	private Controller controller = VaadinSession.getCurrent().getAttribute(Controller.class);
	private SQLContainer head = controller.getMovimentationsContainer();
	private SQLContainer row = controller.getMovimentation_SpecsContainer();
	private SQLContainer type = controller.getMovimentation_TypesContainer();
	private SQLContainer art = controller.getArticlesContainer();
	private SQLContainer dest = controller.getRegistryContainer();
	private SQLContainer site = controller.getSitesContainer();
	private TextField hiddenTypeField = new TextField();
	private TextField hiddenSiteField = new TextField();
	private TextField hiddenDestinationField = new TextField();	
	private Integer headID = null;
	private final FieldGroup editorFields = new FieldGroup();
	private boolean isNew = false;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public MovimentationsView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		
		editorFields.setBuffered(true);
		fieldID.setReadOnly(true);
		editorFields.bind(fieldID, "ID");
		
		fieldOPDATE.setImmediate(true);
		editorFields.bind(fieldOPDATE, "OPDATE");
		fieldOPDATE.setValue(new Date());
				
		destinationCB.addValueChangeListener(new ComboboxChangeListener(hiddenDestinationField));
		destinationCB.setImmediate(true);
		destinationCB.setNullSelectionAllowed(false);
		destinationCB.setNewItemsAllowed(true);
		destinationCB.setContainerDataSource(dest);
		destinationCB.setItemCaptionPropertyId("NAME");
		editorFields.bind(hiddenSiteField, "DESTINATION");
		
		fieldSITE.addValueChangeListener(new ComboboxChangeListener(hiddenSiteField));
		fieldSITE.setImmediate(true);
		fieldSITE.setNullSelectionAllowed(false);
		fieldSITE.setNewItemsAllowed(false);
		fieldSITE.setContainerDataSource(site);
		fieldSITE.setItemCaptionPropertyId("NAME");
		editorFields.bind(hiddenSiteField, "SITE");
		
		fieldTYPE.addValueChangeListener(new ComboboxChangeListener(hiddenTypeField));
		fieldTYPE.setImmediate(true);
		fieldTYPE.setNullSelectionAllowed(false);
		fieldTYPE.setNewItemsAllowed(false);
		fieldTYPE.setContainerDataSource(type);
		fieldTYPE.setItemCaptionPropertyId("DESCRIPTION");
		editorFields.bind(hiddenTypeField, "MOVIMENTATION_TYPE");
		
		saveButton.addClickListener(this);
		backBTN.addClickListener(this);
		addArticleBTN.addClickListener(this);
		
		table.setEditable(true);
		table.setImmediate(true);
		table.setContainerDataSource(row);
		
		
		if (headID==null)
			isNew = true;
		
		if (isNew)
			createNewHead();
		
		
	}

	/* (non-Javadoc)
	 * @see com.vaadin.navigator.View#enter(com.vaadin.navigator.ViewChangeListener.ViewChangeEvent)
	 */
	@Override
	public void enter(ViewChangeEvent event) {
		// TODO Auto-generated method stub
		
	}

	/* (non-Javadoc)
	 * @see com.vaadin.ui.Button.ClickListener#buttonClick(com.vaadin.ui.Button.ClickEvent)
	 */
	@Override
	public void buttonClick(ClickEvent event) {
		Button source = event.getButton();

		if (source==saveButton) 
			commit();
		else if (source == backBTN)
			getUI().getNavigator().navigateTo(MovimentationsListView.NAME);
		else if (source == addArticleBTN)
			addRow();
		
	}


	private void commit() {
				
		try {
			editorFields.commit();
			head.commit();
			table.commit();
			row.commit();
			
		} catch (CommitException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsupportedOperationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

	private void createNewHead() {
		
		// Listener che verrà chiamato quando la nuova movimentazione sarà aggiunta nel db   
		head.addRowIdChangeListener(new RowIdChangeListener(){

			private static final long serialVersionUID = 1128167464731496937L;

			@Override
			public void rowIdChange(RowIdChangeEvent event) {
				
				RowId ri = event.getNewRowId();
				Integer in = (Integer) ri.getId()[0];
				headID=new Integer(in);
				loadHead(ri);
				

			}
			
		});	
		
		Object tempItemId = head.addItem();
		editorFields.setItemDataSource(head.getItem(tempItemId));
				
		fieldOPDATE.setValue(new Date());
		
		Iterator<?> itType = fieldTYPE.getItemIds().iterator();
		if (itType.hasNext())
			fieldTYPE.select(itType.next());
		//hiddenTypeField.setValue(fieldTYPE.getValue().toString());
		
		hiddenSiteField.setValue(new Integer(controller.getLoggedUser().getSite()).toString());
		RowId defaultSiteRowId = new RowId(hiddenSiteField.getValue());
		Item defaultSite = fieldSITE.getItem(defaultSiteRowId );
		if (defaultSite == null) {
			fieldSITE.select(fieldSITE.getItemIds().iterator().next());
		} else {
			Property<?> externalId = defaultSite.getItemProperty("ID");
			RowId erw = new RowId(externalId.getValue());
			fieldSITE.select(erw);
		}
				
		try {
			editorFields.commit();
			head.commit();
		} catch (UnsupportedOperationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (CommitException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@SuppressWarnings("unchecked")
	private void loadHead(RowId headRowId){
		
		Item it = head.getItem(headRowId);
		
		if (it == null) {
			Notification.show("Error", "Error loading.",  Notification.Type.WARNING_MESSAGE);
		}
		
		Property<Integer> id = it.getItemProperty("ID");
		editorFields.setItemDataSource(it);
		row.removeAllContainerFilters();
		row.addContainerFilter(new Compare.Equal("ID_HEAD",headID));
			
		
	}

	/**
	 * Class implementing the ValueChangeListener used to change the textfield value with the key
	 * of the selected external row in the combobox
	 */
	private class ComboboxChangeListener implements ValueChangeListener {

		private TextField field;
		private static final long serialVersionUID = 90074393261185094L;

		/**
		 * @param hiddend field binded to the actual data
		 */
		ComboboxChangeListener(TextField field) {
			this.field = field;
		}
		
		/* (non-Javadoc)
		 * @see com.vaadin.data.Property.ValueChangeListener#valueChange(com.vaadin.data.Property.ValueChangeEvent)
		 */
		@Override
		public void valueChange(ValueChangeEvent event) {
			field.setValue(event.getProperty().getValue().toString());
			
		}

		
	}


	@SuppressWarnings({ "unchecked", "rawtypes" })
	private void addRow() {
		
		Object tempItemId = table.addItem();
		Item itt = table.getItem(tempItemId);
		itt.getItemProperty("ID_HEAD").setValue(new Integer(headID));
		itt.getItemProperty("QUANTITY").setValue(new Integer(0));
		Property price = itt.getItemProperty("PRICE");
		price.setValue(new BigDecimal(0));
		itt.getItemProperty("DISCOUNT").setValue(new BigDecimal(0));
		itt.getItemProperty("TOTAL").setValue(new BigDecimal(0));

	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		mainLayout.addComponent(horizontalLayout_1);
		
		// gridLayout_2
		gridLayout_2 = buildGridLayout_2();
		mainLayout.addComponent(gridLayout_2);
		
		// table
		table = new Table();
		table.setImmediate(false);
		table.setWidth("100.0%");
		table.setHeight("100.0%");
		mainLayout.addComponent(table);
		mainLayout.setExpandRatio(table, 100.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("-1px");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(false);
		
		// backBTN
		backBTN = new Button();
		backBTN.setCaption("Back");
		backBTN.setImmediate(true);
		backBTN.setWidth("100.0%");
		backBTN.setHeight("-1px");
		horizontalLayout_1.addComponent(backBTN);
		horizontalLayout_1.setExpandRatio(backBTN, 100.0f);
		
		// saveButton
		saveButton = new Button();
		saveButton.setCaption("Save");
		saveButton.setImmediate(true);
		saveButton.setWidth("100.0%");
		saveButton.setHeight("-1px");
		horizontalLayout_1.addComponent(saveButton);
		horizontalLayout_1.setExpandRatio(saveButton, 100.0f);
		
		return horizontalLayout_1;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_2() {
		// common part: create layout
		gridLayout_2 = new GridLayout();
		gridLayout_2.setImmediate(false);
		gridLayout_2.setWidth("100.0%");
		gridLayout_2.setHeight("100px");
		gridLayout_2.setMargin(false);
		gridLayout_2.setColumns(4);
		gridLayout_2.setRows(4);
		
		// fieldID
		fieldID = new TextField();
		fieldID.setImmediate(false);
		fieldID.setWidth("-1px");
		fieldID.setHeight("-1px");
		gridLayout_2.addComponent(fieldID, 0, 0);
		
		// fieldOPDATE
		fieldOPDATE = new PopupDateField();
		fieldOPDATE.setImmediate(false);
		fieldOPDATE.setWidth("-1px");
		fieldOPDATE.setHeight("23px");
		gridLayout_2.addComponent(fieldOPDATE, 1, 0);
		
		// fieldSITE
		fieldSITE = new ComboBox();
		fieldSITE.setImmediate(false);
		fieldSITE.setWidth("-1px");
		fieldSITE.setHeight("-1px");
		gridLayout_2.addComponent(fieldSITE, 2, 0);
		
		// fieldTYPE
		fieldTYPE = new ComboBox();
		fieldTYPE.setImmediate(false);
		fieldTYPE.setWidth("-1px");
		fieldTYPE.setHeight("-1px");
		gridLayout_2.addComponent(fieldTYPE, 3, 0);
		
		// destinationCB
		destinationCB = new ComboBox();
		destinationCB.setImmediate(false);
		destinationCB.setWidth("-1px");
		destinationCB.setHeight("-1px");
		gridLayout_2.addComponent(destinationCB, 3, 1);
		
		// addArticleBTN
		addArticleBTN = new Button();
		addArticleBTN.setCaption("Add");
		addArticleBTN.setImmediate(true);
		addArticleBTN.setWidth("-1px");
		addArticleBTN.setHeight("-1px");
		gridLayout_2.addComponent(addArticleBTN, 0, 3);
		
		return gridLayout_2;
	}
	
}
