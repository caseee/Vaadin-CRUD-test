/**
 * movimentationsList.java
 */
package vaadinapp.view;

import java.util.Calendar;
import java.util.Date;

import vaadinapp.Controller;
import vaadinapp.data.UserBean;
import vaadinapp.data.UserLevel;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.util.sqlcontainer.RowId;
import com.vaadin.data.util.sqlcontainer.SQLContainer;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;

/**
 * @author Marco Casella
 *
 */
public class MovimentationsListView extends CustomComponent implements  View , ClickListener{

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Table lists;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;
	@AutoGenerated
	private Button searchBTN;
	@AutoGenerated
	private ComboBox siteCB;
	@AutoGenerated
	private ComboBox typeCB;
	@AutoGenerated
	private PopupDateField toDate;
	@AutoGenerated
	private PopupDateField fromDate;
	@AutoGenerated
	private Button deleteBtn;
	@AutoGenerated
	private Button newit;
	@AutoGenerated
	private Button editBTN;
	@AutoGenerated
	private Button backBTN;
	// Custom field
	private static final long serialVersionUID = -1062391231707169028L;
	public static final String NAME = "MovimentationsList";
	private VaadinSession session = VaadinSession.getCurrent();
	private Controller controller = session.getAttribute(Controller.class);
	private SQLContainer head = controller.getMovimentationsContainer();
	private SQLContainer row = controller.getMovimentation_SpecsContainer();
	private SQLContainer type = controller.getMovimentation_TypesContainer();
	private SQLContainer art = controller.getArticlesContainer();
	private SQLContainer dest = controller.getRegistryContainer();
	private SQLContainer site = controller.getSitesContainer();	
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public MovimentationsListView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		lists.setContainerDataSource(head);
		newit.addClickListener(this);
		
		typeCB.setImmediate(true);
		typeCB.setNullSelectionAllowed(false);
		typeCB.setNewItemsAllowed(false);
		typeCB.setItemCaptionPropertyId("DESCRIPTION");
		typeCB.setContainerDataSource(type);
		typeCB.select(typeCB.getItemIds().iterator().next());
		
		UserBean ub = controller.getLoggedUser();
		
		if ( ub.getLevel() <= UserLevel.StoreManager.getValue())
			siteCB.setReadOnly(true);
		
		siteCB.setImmediate(true);
		siteCB.setNullSelectionAllowed(false);
		siteCB.setNewItemsAllowed(false);
		siteCB.setItemCaptionPropertyId("NAME");
		siteCB.setContainerDataSource(site);
				
		// Dalla chiave del sito costruisco il rowid
		RowId defaultSiteRowId = new RowId(ub.getSite());
		// Trovo l'item corrispondente nella tabella
		Item defaultSite = siteCB.getItem(defaultSiteRowId );
		Property<?> externalId = defaultSite.getItemProperty("ID");
		RowId erw = new RowId(externalId.getValue());
		siteCB.select(erw);
				
		Calendar c = Calendar.getInstance();
		c.add(Calendar.DATE, 1);
		toDate.setValue(c.getTime());
		fromDate.setValue(new Date());
		
	}

	/* (non-Javadoc)
	 * @see com.vaadin.navigator.View#enter(com.vaadin.navigator.ViewChangeListener.ViewChangeEvent)
	 */
	@Override
	public void enter(ViewChangeEvent event) {
		// TODO Auto-generated method stub
		
	}

	/* (non-Javadoc)
	 * @see com.vaadin.ui.Button.ClickListener#buttonClick(com.vaadin.ui.Button.ClickEvent)
	 */
	@Override
	public void buttonClick(ClickEvent event) {
		final Button source = event.getButton();

		if (source==newit) 
			getUI().getNavigator().navigateTo(MovimentationsView.NAME);
			

		
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		mainLayout.addComponent(horizontalLayout_1);
		
		// lists
		lists = new Table();
		lists.setImmediate(false);
		lists.setWidth("100.0%");
		lists.setHeight("100.4%");
		mainLayout.addComponent(lists);
		mainLayout.setExpandRatio(lists, 100.0f);
		mainLayout.setComponentAlignment(lists, new Alignment(48));
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("100.0%");
		horizontalLayout_1.setHeight("40px");
		horizontalLayout_1.setMargin(false);
		
		// backBTN
		backBTN = new Button();
		backBTN.setCaption("Back");
		backBTN.setImmediate(true);
		backBTN.setWidth("100.0%");
		backBTN.setHeight("-1px");
		horizontalLayout_1.addComponent(backBTN);
		horizontalLayout_1.setExpandRatio(backBTN, 100.0f);
		
		// editBTN
		editBTN = new Button();
		editBTN.setCaption("Edit");
		editBTN.setImmediate(true);
		editBTN.setWidth("100.0%");
		editBTN.setHeight("-1px");
		horizontalLayout_1.addComponent(editBTN);
		horizontalLayout_1.setExpandRatio(editBTN, 100.0f);
		
		// newit
		newit = new Button();
		newit.setCaption("New");
		newit.setImmediate(true);
		newit.setWidth("100.0%");
		newit.setHeight("-1px");
		horizontalLayout_1.addComponent(newit);
		horizontalLayout_1.setExpandRatio(newit, 100.0f);
		
		// deleteBtn
		deleteBtn = new Button();
		deleteBtn.setCaption("Delete");
		deleteBtn.setImmediate(true);
		deleteBtn.setWidth("100.0%");
		deleteBtn.setHeight("-1px");
		horizontalLayout_1.addComponent(deleteBtn);
		horizontalLayout_1.setExpandRatio(deleteBtn, 100.0f);
		
		// fromDate
		fromDate = new PopupDateField();
		fromDate.setImmediate(false);
		fromDate.setWidth("100.0%");
		fromDate.setHeight("-1px");
		horizontalLayout_1.addComponent(fromDate);
		horizontalLayout_1.setExpandRatio(fromDate, 100.0f);
		
		// toDate
		toDate = new PopupDateField();
		toDate.setImmediate(false);
		toDate.setWidth("100.0%");
		toDate.setHeight("-1px");
		horizontalLayout_1.addComponent(toDate);
		horizontalLayout_1.setExpandRatio(toDate, 100.0f);
		
		// typeCB
		typeCB = new ComboBox();
		typeCB.setImmediate(false);
		typeCB.setWidth("100.0%");
		typeCB.setHeight("-1px");
		horizontalLayout_1.addComponent(typeCB);
		horizontalLayout_1.setExpandRatio(typeCB, 100.0f);
		
		// siteCB
		siteCB = new ComboBox();
		siteCB.setImmediate(false);
		siteCB.setWidth("100.0%");
		siteCB.setHeight("-1px");
		horizontalLayout_1.addComponent(siteCB);
		horizontalLayout_1.setExpandRatio(siteCB, 100.0f);
		
		// searchBTN
		searchBTN = new Button();
		searchBTN.setCaption("Search");
		searchBTN.setImmediate(true);
		searchBTN.setWidth("100.0%");
		searchBTN.setHeight("-1px");
		horizontalLayout_1.addComponent(searchBTN);
		horizontalLayout_1.setExpandRatio(searchBTN, 100.0f);
		
		return horizontalLayout_1;
	}

}
